<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity.Design" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Data.Entity.Design.PluralizationServices" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# DTE Dte;
	var suggestedNs=System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NamespaceHint");
#>
<#@ include file="../EnvDteHelper.ttinclude"#>
<#@ include file="ApiController.Settings.ttinclude"#>
<# 
	var projects = RecurseSolutionProjects(Dte);
	var q= from p in projects
			from pi in p.ProjectItems.Cast<ProjectItem>()
			where pi.FileCodeModel!=null
			select new{p,pi,CodeElements=pi.FileCodeModel.CodeElements.Cast<CodeElement>()};
	var context= q.Where(x=>x.pi.Name==dbContextFileName).First();
	var typesToMap = Descendants(context.CodeElements,ce=>ce.Children.Cast<CodeElement>()).OfType<CodeProperty>().OrderBy(x=>x.Name).ToArray();
	var project=GetProjectContainingT4File(Dte,false);
	var pluralizationService = PluralizationService.CreateService(new CultureInfo("en-US"));
#>
using System.Linq;
using System.Web.Http.OData;

<#foreach(var ns in addlNamespaces){#>
using <#=ns#>;
<#}#>

using System.Web.Http.OData.Builder;

using Microsoft.AspNet.Identity.EntityFramework;

namespace <#=suggestedNs#>
{
<# if(generateEdmBuilderHelper) { #>
    public static class ApiControllerHelpers
    {
        public static void BuildApiEntities(this ODataConventionModelBuilder builder)
        {

<# foreach(var tm in typesToMap){ 
			var singular=pluralizationService.Singularize(tm.Name); 
			var plural=pluralizationService.Pluralize(tm.Name);
#>            builder.EntitySet<<#=singular#>>("<#=plural#>");
<# } #>
        }

    }
<# } #>
<#	foreach(var tm in typesToMap){
	var singular=pluralizationService.Singularize(tm.Name);
	var plural=pluralizationService.Pluralize(tm.Name);
	var id=singular+( needsIDConvention? "ID":"Id"); // in case your odata or EF context needs the "ID" capitalization instead of "Id"
#>

    public class <#=tm.Name#>Controller : ODataController
    {
        readonly ApplicationIdentityContext _db;

        public <#=tm.Name#>Controller(ApplicationIdentityContext db)
        {
            _db = db;
        }

        /// GET api/<#=singular#>
        public IQueryable<<#=singular#>> Get()
        {
            return _db.<#=plural#>;
        }

        // GET api/<#=singular#>/5
        public <#=singular#> Get(int id)
        {
            return _db.<#=plural#>.FirstOrDefault(x => x.<#=id#> == id);
        }

    }
<#}#>
}